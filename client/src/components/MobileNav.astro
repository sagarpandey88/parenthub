---
import ThemeToggle from './ThemeToggle.astro';
---

<nav class="md:hidden fixed bottom-0 left-0 right-0 bg-white dark:bg-dark-900 shadow-[0_-2px_10px_rgba(0,0,0,0.1)] z-40 transition-all duration-300">
  <div class="flex items-center justify-around py-2 nav-bg">
    <a href="/timeline/pre-pregnancy" class="mobile-nav-item">
      <span class="material-icons">favorite</span>
      <span>Pre Pregnancy</span>
    </a>
    <a href="/timeline/pregnancy" class="mobile-nav-item">
      <span class="material-icons">pregnant_woman</span>
      <span>Pregnancy</span>
    </a>
    <a href="/timeline/post-pregnancy" class="mobile-nav-item">
      <span class="material-icons">child_friendly</span>
      <span>Post Pregnancy</span>
    </a>
    <a href="/timeline/life-with-kids" class="mobile-nav-item">
      <span class="material-icons">family_restroom</span>
      <span>Life with kids</span>
    </a>
    <button id="mobile-theme-toggle" class="mobile-nav-item">
      <span class="material-icons">palette</span>
      <span>Theme</span>
    </button>
  </div>
</nav>

<!-- Mobile Theme Drawer -->
<div id="theme-drawer" class="fixed inset-0 bg-black/50 z-50 hidden transition-opacity duration-300 opacity-0">
  <div class="absolute bottom-0 left-0 right-0 bg-white dark:bg-dark-800 rounded-t-2xl p-6 transform translate-y-full transition-transform duration-300">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-xl font-semibold">Choose Theme</h3>
      <button id="close-drawer" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-dark-700">
        <span class="material-icons">close</span>
      </button>
    </div>
    
    <div class="flex justify-around gap-4">
      <button data-theme-value="default" class="theme-option flex flex-col items-center gap-2">
        <div class="w-16 h-16 rounded-full bg-primary-500 border-4 border-white dark:border-dark-700"></div>
        <span>Light Blue</span>
      </button>
      
      <button data-theme-value="pink" class="theme-option flex flex-col items-center gap-2">
        <div class="w-16 h-16 rounded-full bg-secondary-500 border-4 border-white dark:border-dark-700"></div>
        <span>Light Pink</span>
      </button>
      
      <button data-theme-value="dark" class="theme-option flex flex-col items-center gap-2">
        <div class="w-16 h-16 rounded-full bg-dark-800 border-4 border-white dark:border-dark-700"></div>
        <span>Dark</span>
      </button>
    </div>
  </div>
</div>

<style>
  .mobile-nav-item {
    @apply flex flex-col items-center justify-center px-2 py-1 text-dark-500 dark:text-dark-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200 text-xs;
  }
  
  .mobile-nav-item[aria-current="page"] {
    @apply text-primary-600 dark:text-primary-400;
  }
  
  .material-icons {
    @apply text-xl mb-1;
  }
  
  .theme-option {
    @apply p-2 rounded-lg transition-all duration-200 hover:bg-gray-100 dark:hover:bg-dark-700;
  }
  
  .theme-option.active {
    @apply bg-primary-100 dark:bg-primary-900/20 text-primary-600 dark:text-primary-400;
  }
  
  .nav-bg {
    background-color: rgba(var(--color-background), 0.85);
    border-radius: 0.75rem;
    box-shadow: 0 2px 8px 0 rgba(0,0,0,0.03);
    padding: 0.25rem 1.5rem;
  }
  .dark .nav-bg, html.dark-theme .nav-bg {
    background-color: rgba(var(--color-background), 0.95);
  }
</style>

<script>
  // Set active nav link based on current path
  document.addEventListener('astro:page-load', () => {
    const currentPath = window.location.pathname;
    document.querySelectorAll('.mobile-nav-item').forEach(link => {
      if (link.tagName.toLowerCase() === 'a') {
        const href = link.getAttribute('href');
        if (href && (href === currentPath || (href !== '/' && currentPath.startsWith(href)))) {
          link.setAttribute('aria-current', 'page');
        } else if (href === '/' && currentPath === '/') {
          link.setAttribute('aria-current', 'page');
        } else {
          link.removeAttribute('aria-current');
        }
      }
    });
    
    // Set up mobile theme drawer functionality
    const themeToggle = document.getElementById('mobile-theme-toggle');
    const themeDrawer = document.getElementById('theme-drawer');
    const closeDrawer = document.getElementById('close-drawer');
    const drawerContent = themeDrawer?.querySelector('div:last-child');
    
    function openDrawer() {
      if (!themeDrawer) return;
      themeDrawer.classList.remove('hidden');
      setTimeout(() => {
        themeDrawer.classList.remove('opacity-0');
        if (drawerContent) drawerContent.classList.remove('translate-y-full');
      }, 10);
    }
    
    function closeDrawerFn() {
      if (!themeDrawer) return;
      themeDrawer.classList.add('opacity-0');
      if (drawerContent) drawerContent.classList.add('translate-y-full');
      setTimeout(() => {
        themeDrawer.classList.add('hidden');
      }, 300);
    }
    
    themeToggle?.addEventListener('click', openDrawer);
    closeDrawer?.addEventListener('click', closeDrawerFn);
    themeDrawer?.addEventListener('click', (e) => {
      if (e.target === themeDrawer) closeDrawerFn();
    });
    
    // Handle theme option clicks
    document.querySelectorAll('.theme-option').forEach(option => {
      option.addEventListener('click', () => {
        const themeValue = option.getAttribute('data-theme-value');
        if (!themeValue) return;
        
        // Update active state
        document.querySelectorAll('.theme-option').forEach(opt => {
          opt.classList.remove('active');
        });
        option.classList.add('active');
        
        // Apply theme
        if (typeof setTheme === 'function') {
          setTheme(themeValue);
        }
        
        // Close drawer
        closeDrawerFn();
      });
    });
  });
</script>

<!-- Material Icons -->
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">